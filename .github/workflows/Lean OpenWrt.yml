#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Lean OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: 0 17 * * *
  watch:
    types: started

env:
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/lean/R4.config
  DIY_P1_SH:  scripts/hook-feeds.sh
  DIY_P2_SH:  scripts/lean.sh
  IPV6MOD_IN_FIRMWARE: true
  KMODS_IN_FIRMWARE: true
  UPLOAD_RELEASE: true
  OPENWRT_DEVICE: R2S
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-latest

      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Maximize build space
      uses: easimon/maximize-build-space@master
      with:
        root-reserve-mb: 512
        swap-size-mb: 1024
        remove-dotnet: 'true'
        remove-android: 'true'
        remove-haskell: 'true'
        remove-codeql: 'true'  
    
      
    - name: Initialize the compilation environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        ( sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential clang flex g++ gawk gcc-multilib gettext \
        git libncurses5-dev libssl-dev python3-distutils rsync unzip zlib1g-dev swig libpython3-dev aria2 jq subversion qemu-utils ccache rename libelf-dev
        sudo -E apt-get -qq purge azure-cli ghc* zulu* hhvm llvm* firefox powershell openjdk* dotnet* google* mysql* php* android* rename speedtest-cli
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean ) &
        sudo timedatectl set-timezone "$TZ"
        
    - name: Download firmware source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update & install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Load feeds.conf.default
      run: |
        chmod +x ../scripts/*.sh
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Load config
      run: |
        [ -e "$CONFIG_FILE" ] && cat "$CONFIG_FILE" > openwrt/.config
        chmod +x ../scripts/*.sh && cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH
        
    - name: Download Package
      id: package
      run: |
        cd openwrt
        ../scripts/modify_config.sh
        cat .config
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
  
    - name: Compile Packages
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd openwrt/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        echo "PLATFORM=$(echo $PLATFORM)" >> $GITHUB_OUTPUT
        cd openwrt/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        echo "TARGET=$(echo $TARGET)" >> $GITHUB_OUTPUT
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "SUBTARGET=$(echo $SUBTARGET)" >> $GITHUB_OUTPUT
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "SUBTARGET=$(echo $SUBTARGET)" >> $GITHUB_OUTPUT
        echo "FIRMWARE=$(echo $PWD)" >> $GITHUB_OUTPUT
        echo "COMPILE_STATUS=success" >> $GITHUB_OUTPUT
        
    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "GENERATE_STATUS=success" >> $GITHUB_OUTPUT
          
    - name: Generate release tags
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "release_tag=${{ env.date2 }}" >> $GITHUB_OUTPUT
        touch release.txt
        echo "ðŸ“¥ å›ºä»¶ä¸‹è½½" >> release.txt
        echo "status=success" >> $GITHUB_OUTPUT
          
    - name: Publish to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ${{ env.FIRMWARE }}/*
        name: ${{ env.date3 }}
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        retain_days: 1
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 7
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.RELEASES_TOKEN }}

    - name: Delete Artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: |
          bin-archive
